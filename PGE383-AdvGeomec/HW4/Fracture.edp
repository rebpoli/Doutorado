//--------------------------------------------------------------------
// Dimensions
real xa = 0. ;
real xb = 100. ;  // x-size of the domain

real ya = -50. ;
real yb = 50. ;  // y-size of the domain

real xSize = xb - xa ;
real ySize = yb - ya ;

// Elastic constants
real E = 30e9 ;     // Young's modulus
real nu = 0.2 ;     // Poisson's ratio

real G = E/(2*(1+nu )) ; // shear modulus
real lambda = E*nu/((1+nu)*(1-2*nu)) ; // Lame constant

//Stresses
real Sx = 12e6 ;
real Sy = 3e6 ;
real Pfrac = 10.0e6;

// FRACTURE
real xf = 10; // fracture half-length
real fw = .1; // fracture half-width


//--------------------------------------------------------------------
// First define boundaries 
border Right(t=ya, yb){x=xb;y=t;}
border Top(t=xb, xa){x=t;y=yb;}
border Left1(t=yb,(ya+ySize/2+xf)){x=xa;y=t;}
border Frac(t = -pi/2, pi/2) {x = fw*cos(t); y = xf*sin(-t);}
border Left2(t=(ya+ySize/2-xf), ya){x=xa;y=t;}
border Bottom(t=xa,xb){x=t;y=ya;} 


//SHOW DOMAIN
plot( Right(10)+Top(10)+Left1(10), Left2(10) +Bottom(10) +Frac(40), wait=true);


//--------------------------------------------------------------------
// Create mesh 
int n = 100; // number of mesh nodes on the outer borders 
int nfrac = 100; // number of mesh nodes on wellbore 
mesh Omega = buildmesh (Right(n)+Top(n)+Left1(n/2)+Left2(n/2)+Bottom(n)+Frac(nfrac));

plot(Omega, wait=true);

// FE spaces 
fespace Displacement(Omega, P2); // linear shape functions 
fespace Stress(Omega, P0); // piecewise constants

Displacement u1, u2, v1, v2;
Stress sigmaxx, sigmayy, sigmaxy;


//--------------------------------------------------------------------
// definition of 2 macros : 
// macro for strain 
macro e(u1,u2)
	[
		dx(u1),
		(dy(u1)+dx(u2))/2 ,
		(dx(u2)+dy(u1))/2 , 
		dy(u2)
	]//eps_xx, eps_xy , eps_yx , eps_yy
// macro for stress 
macro sigma(u1,u2)
	[
		(lambda+2.*G)*e(u1,u2)[0]+lambda*e(u1,u2)[3],
		2.*G*e(u1,u2)[1],
		2.*G*e(u1,u2)[2],
		lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3]
	] //stress s_xx, s_xy, s_yx, s_yy

	
	// Define system of equations
problem Elasticity([u1,u2], [v1,v2]) =
    int2d(Omega) (  sigma(u1,u2)'*e(v1,v2)  )
	+ on(Left1,u1=0)              // Dirichlet boundary conditions
	+ on(Left2,u1=0)              // Dirichlet boundary conditions
	+ on(Bottom,u2=0)
	+ on(Right,u1=0)
	+ on(Top,u2=0)
  // Boundary conditions
  // condition only on one component
  + int1d(Omega, Frac) (Pfrac*(N.x*v1))
  ;


	
//--------------------------------------------------------------------	
//	Solve system
Elasticity;


// Stresses 
sigmaxx = sigma(u1,u2)[0];
sigmayy = sigma(u1,u2)[3]; 
sigmaxy = sigma(u1,u2)[1];	// we could	use	[2]	as	well


//--------------------------------------------------------------------
// plot on the deformed surface
mesh Th=movemesh(Omega,[x+10*u1,y+10*u2]);
plot(Th,cmm="Deformed configuration",wait=1);


// plot the deformation field and stress
plot([u1,u2],coef=10,cmm="Displacement field",wait=1,value=true);
plot(sigmaxx,fill=1, cmm="Stress sigmaxx",wait=1,value=true);
plot(sigmayy,fill=1, cmm="Stress sigmayy",wait=1,value=true);
plot(sigmaxy,fill=1, cmm="Stress sigmaxy",wait=1,value=true);


// Write stress field
ofstream ff("FractureShadow.dat");
for(int i=0;i<100;i++) {
for(int j=0;j<100;j++) {
	// x, y, Sxx, Syy, Sxy
		real xline = xa + xSize*i/100.;
		real yline = ya + ySize*j/100.;
	// Analytical solution
	//write file numerical and analytical solution
	ff<< xline <<", "<< yline 
		<<", "<< sigmaxx(xline,yline)
		<<", "<< sigmayy(xline,yline)
		<<", "<< sigmaxy(xline,yline) 
		<<endl;
}
}

// Write horizontal line from the fracture center
ofstream fc("FractureCenter.dat");
fc << "x,y,sigxx" << endl;
for(int i=0;i<1000;i++) {
  real xline = xa + xSize*i/1000.;
  real yline = 0;

  fc<< xline <<", "<< yline 
    <<", "<< sigmaxx(xline,yline)
    <<endl;
}


// Write displacement along the fracture wall
ofstream ffw("FractureWall.dat");
ffw << "x,y,u1,u2" << endl;
for(int i=0;i<1000;i++) {
  real t = -pi/2 + pi * i / 1000. ;
  real x = fw * cos(t) ;
  real y = xf * sin(-t) ;

  ffw<< x <<","<< y <<","<< u1(x,y) << "," << u2(x,y) << endl;
}

// Along X=0
ofstream ffx0("Along_X_equals_0.dat");
ffx0 << "x,y,u1,u2,sxx,syy,sxy" << endl;
for(int i=0;i<1000;i++) {
  real x = 0;
  real y = ya + ySize/1000*i;

  ffx0 << x << "," << y 
       << "," << u1(x,y) 
       << "," << u2(x,y) 
       << "," << sigmaxx(x,y)
       << "," << sigmayy(x,y)
       << "," << sigmaxy(x,y) 
       << endl;
}
